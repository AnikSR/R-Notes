# Check current working dirctory: getwd()
# Change current working directory: setwd("<directory path>")
# Object can be assigned with "<-" operator:
	> foo <- "Hello, world!"
	> foo
	[1] "Hello, world!"
	> myVar <- c(1, 2, 4)
	> myVar
	[1] 1, 2, 4

# Comment: Like bash, "#" is the comment delimiter in R. Likewise ther's no multiline comment.

# Vector:
	Vectors are list of elements such as [ 1, 2, 3.1] or ["Silva", "vanna", "Yolka"]. Vectors are assigned as:
	> Var <- c(1.1, 2, 4.1, 5, 6.1)
	> Name <- c("Rachel", "Abbas", "Savana", "Gias")
The componenets of vectors can be any allowable data type: integer, float or string/character data.

# Vectors in R is similar to C arrays or Python lists. They can be accessed by indexing:
	> Name[2]
	[1] Abbas
Note that in R, indexing starts from 1, not 0.

# They can be sliced:
	> Var[2:4]
	> [1] 2  4.1  5
However slicing is less flexible than Python, only forward and single step slicing is possible.

# Type of any variable can be explored using str() function.
	> str(Var)
	num [1:5] 1.1  2  4.1  5  6.1
	> str(Name)
	chr [1:4] "Rachel", "Abbas", "Savana", "Gias"
	> num <- 3.2
	> str(num)
	num 3.2

# factor:
	Categorical variables in R are called factors. Their are as many categories as are different variables. For example:
	> Spear <- c("a", "b", "b", "a", "a")
	> V <- factor(Spear)
	> V
	[1] a b b a a
	Levels: a b b a a
	> str(V)
	Factor w/ 2 levels "a" "b" : 1 2 2 1 1
If its done with any previous variables, where no data is repeated, then this will happen:
	> F <- factor(Var)
	> F
	[1] 1.1  2  4.1  5  6.1
	Levels: 1.1  2  4.1  5  6.1
	> str(F)
	Factor w/ 5 levels "1.1", "2", "4.1",...: 1.1  2  4.1  5  6.1

# Lists:
	In R lists are an ordered collection of heterogenous objects. For example:
	> myList <- list(varia=Var, SPR=Spear, firstName=Name)
	>myList

	$varia
	[1] 1.1  2  4.1  5  6.1

	$SPR
	[1] 1 2 2 1 1

	$firstName
	[1] "Rachel", "Abbas", "Savana", "Gias"

Each item of a list can be retrived with index:
	> myList[[2]]
	[1] 1 2 2 1 1

	>myList[[2]][3]
	[1] 2

List items can also be retrived with names:
	> myList $varia
	[1] 1.1  2  4.1  5  6.1

	> myList $varia[3]
	[1] 4.1

However if the element names are not specified, the items can only be retrived with index. For example:
	> hisList <- list(Var, Spear, Name)
	> hisList

	[[1]]
	1.1  2  4.1  5  6.1

	[[2]]
	1 2 2 1 1

	[[3]]
	"Rachel", "Abbas", "Savana", "Gias"	

In this case the elements can't be retrived with name:
	> hisList $Var
	NULL
since hisList only received the items in Var, not the variable name.

*Note: If two or more vectors are added together as a vector, then the vectors simply concatenates, as shown bellow:
	> myVector <- c(Var, Spear, Name)
	> myVector
	[1] "1.1" "2" "4.1" "5" "6.1" "1" "2" "2" "1" "1" "Rachel" "Abbas" "Savana" "Gias"
Also note the type coersion occured when list with elements from Float and String type are concatenated.

# Dataframe
Data frames are two dimentional objects made of columns and rows. They can be created from two vectors:
	> franchise <- c("Mets", "Nationals", "Marlins", "Phillies", "Braves")
	> city <- c("New York", "Washington, DC", "Miami", "Philadelphia", "Atlanta")
	> teams <- data.frames(franchise, city)
	> teams
	 franchise           city
	1 Mets       	  New York
	2 Nationals Washington, DC
	3 Marlins			 Miami
	4 Phillies    Philadelphia
	5 Braves		   Atlanta
	 
The vectors making up the dataframe must have same number of components. The Names of columns are attributes of the dataframe and can
be seperately retrived:
	> names(teams)
	[1] "franchise" "city"

Each columns can be seperately accessed as a vector or as a factor. First accessing as factors:
	> team[[2]]
	[1] New York       Washington, DC Miami          Philadelphia   Atlanta
	Levels: Atlanta Miami New York Philadelphia Washington, DC

	> team $city
	[1] New York       Washington, DC Miami          Philadelphia   Atlanta       
	Levels: Atlanta Miami New York Philadelphia Washington, DC

Now accessign as vector:
	> team [1]
	franchise
	1      Mets
	2 Nationals
	3   Marlins
	4  Phillies
	5    Braves

# Matrix, Matrices
Matrix are dataframe with only numerical members.
